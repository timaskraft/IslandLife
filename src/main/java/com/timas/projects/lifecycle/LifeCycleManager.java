package com.timas.projects.lifecycle;

import com.timas.projects.config.Configuration;
import com.timas.projects.game.relation.RelationEaten;
import com.timas.projects.game.world.World;
import com.timas.projects.lifecycle.events.EventOfTheWorld;
import com.timas.projects.lifecycle.events.WorldCreation;
import com.timas.projects.lifecycle.tasks.EventTask;
import com.timas.projects.lifecycle.tasks.RenderTask;
import com.timas.projects.lifecycle.tasks.RoutineTask;
import com.timas.projects.repository.EntityFactory;
import com.timas.projects.repository.RelationEatenCreator;
import com.timas.projects.repository.WorldModifier;
import com.timas.projects.services.entity.*;
import com.timas.projects.services.random.RandomService;
import com.timas.projects.services.render.RenderService;
import lombok.RequiredArgsConstructor;
import lombok.extern.log4j.Log4j;

import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
@Log4j
@RequiredArgsConstructor
public class LifeCycleManager {

    final Configuration configuration;
    final RenderService renderService;
    final World world;

    /////////////////////////////////////////////////////////
    private final RandomService randomService = new RandomService();
    /*–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –§–∞–±—Ä–∏–∫–∏ —Å—É—â–Ω–æ—Å—Ç–µ–π */
    private final EntityFactory entityFactory = new EntityFactory();

    /*–í–∑–∞–∏–º–æ—Å–≤—è–∑–∏ –º–µ–∂–¥—É —Å—É—â–Ω–æ—Å—Ç—è–º–∏, –∫—Ç–æ –∫–æ–≥–æ –∫—É—à–∞–µ—Ç */
    private final RelationEaten relationEaten = new RelationEatenCreator(entityFactory.getTypesOfEntities()).getRelationEaten();
    /* —Å–µ—Ä–≤–∏—Å —Ä–µ–ø—Ä–æ–¥—É–∫—Ü–∏–∏ */
    private final ReproduceService reproduceService = new ReproduceService(entityFactory);
    private final ReproduceCoordinator reproduceCoordinator = new ReproduceCoordinator(randomService, reproduceService);

    /* —Å–µ—Ä–≤–∏—Å –ø–∏—Ç–∞–Ω–∏—è */
    private final FoodService foodService = new FoodService();
    private final FoodCoordinator foodCoordinator = new FoodCoordinator(randomService,foodService,relationEaten);
    ////////////////////////////////////////////////////////////////////////////////////////////
    /* —Å–µ—Ä–≤–∏—Å –¥–≤–∏–∂–µ–Ω–∏—è */
    private final MoveService moveService = new MoveService();
    private final MoveCoordinator moveCoordinator = new MoveCoordinator(randomService,moveService);


    /* –ø—É–ª –ø–æ—Ç–æ–∫–æ–≤ */
    private final ScheduledExecutorService executorService = Executors.newScheduledThreadPool(3);



    public void startLifeCycle() {

        /* –∏–Ω–∏—Ç –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –º–∏—Ä–∞ */
        WorldModifier worldModifier = new WorldModifier(world);
        worldModifier.init(configuration.getSizeX(),configuration.getSizeY());

        /* –∑–∞–ø—É—Å–∫–∞–µ–º –µ–≤–µ–Ω—Ç –∑–∞—Å–µ–ª–µ–Ω–∏–µ –º–∏—Ä–∞ */
        new WorldCreation(worldModifier,reproduceCoordinator,configuration).event();

        /* –†–∞–∑–¥–µ–ª–∏–º –ª–∞–π—Ñ —Ü–∏–∫–ª –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –±–ª–æ–∫–æ–≤
          1 - —Ä—É—Ç–∏–Ω–∞ (–ø–æ–∫—É—à–∞–ª–∏ - —Ä–∞–∑–º–Ω–æ–∂–∏–ª–∏—Å—å - –ø–æ—Ö–æ–¥–∏–ª–∏)
          2 - –∏–≤–µ–Ω—Ç—ã (—Ä–æ—Å—Ç —Ä–∞—Å—Ç–µ–Ω–∏–π, –∫–∞—Ç–∞–∫–ª–∏–∑–º ( –ø–æ–∂–∞—Ä U+1F525, –∑–µ–º–ª–µ—Ç—Ä—è—Å–µ–Ω–∏–µ, –Ω–∞–ø–∞–¥–µ–Ω–∏–µ —Ä–∞–ø—Ç–æ—Ä–∞ ü¶ñ) )
          3 - —Ä–µ–Ω–¥–µ—Ä –º–∏—Ä–∞ –∫–∞–∂–¥—ã–µ n —Å–µ–∫, –∏ –≤—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
         */

        // –ë–ª–æ–∫ 1 - –†—É—Ç–∏–Ω–∞: –ø–æ–∫—É—à–∞–ª–∏ - —Ä–∞–∑–º–Ω–æ–∂–∏–ª–∏—Å—å - –ø–æ—Ö–æ–¥–∏–ª–∏

        RoutineTask routineTask = new RoutineTask(worldModifier,foodCoordinator,reproduceCoordinator,moveCoordinator,configuration);

        executorService.scheduleWithFixedDelay(routineTask, 0, configuration.getPause_routine(), TimeUnit.MILLISECONDS);


        if (configuration.getEvent_timeout()>0) {
            // –ë–ª–æ–∫ 2 - –ò–≤–µ–Ω—Ç—ã: —Ä–æ—Å—Ç —Ä–∞—Å—Ç–µ–Ω–∏–π, –∫–∞—Ç–∞–∫–ª–∏–∑–º—ã

            EventTask eventsTask = new EventTask(worldModifier,reproduceCoordinator,configuration);

            executorService.scheduleWithFixedDelay(eventsTask, 0, configuration.getEvent_timeout(), TimeUnit.SECONDS);
        }


        if (configuration.getStatistics_timeout()>0)
        {
            // –ë–ª–æ–∫ 3 - –†–µ–Ω–¥–µ—Ä –º–∏—Ä–∞ –∏ –≤—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–∂–¥—ã–µ n —Å–µ–∫—É–Ω–¥
            RenderTask renderTask = new RenderTask(renderService,world);

            executorService.scheduleWithFixedDelay(renderTask, 0, configuration.getStatistics_timeout(), TimeUnit.SECONDS);
        }

    }

    public void stopLifeCycle() {
        executorService.shutdown();
        try {
            if (!executorService.awaitTermination(1, TimeUnit.SECONDS)) {
                executorService.shutdownNow();
            }
        } catch (InterruptedException e) {
            executorService.shutdownNow();
        }
    }
}
